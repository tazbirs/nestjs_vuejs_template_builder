{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, reactive, computed, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter, useRoute } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport { v4 as uuidv4 } from 'uuid';\nexport default {\n  name: 'FormBuilder',\n  props: {\n    id: {\n      type: String,\n      required: false\n    }\n  },\n  setup(props) {\n    const store = useStore();\n    const router = useRouter();\n    const route = useRoute();\n    const form = reactive({\n      name: '',\n      description: '',\n      elements: [],\n      templateId: route.query.templateId || null,\n      isPublished: false\n    });\n    const loading = computed(() => store.getters.isLoading);\n    const templatesLoading = ref(false);\n    const isEdit = computed(() => !!props.id);\n    const elementDialogVisible = ref(false);\n    const isEditingElement = ref(false);\n    const currentElement = ref({});\n    const currentElementIndex = ref(-1);\n    const templates = computed(() => store.getters.templates);\n    const availableElements = [{\n      type: 'text',\n      label: 'Text Input'\n    }, {\n      type: 'textarea',\n      label: 'Text Area'\n    }, {\n      type: 'number',\n      label: 'Number'\n    }, {\n      type: 'email',\n      label: 'Email'\n    }, {\n      type: 'password',\n      label: 'Password'\n    }, {\n      type: 'select',\n      label: 'Dropdown'\n    }, {\n      type: 'radio',\n      label: 'Radio Buttons'\n    }, {\n      type: 'checkbox',\n      label: 'Checkboxes'\n    }, {\n      type: 'date',\n      label: 'Date Picker'\n    }, {\n      type: 'time',\n      label: 'Time Picker'\n    }, {\n      type: 'file',\n      label: 'File Upload'\n    }, {\n      type: 'slider',\n      label: 'Slider'\n    }, {\n      type: 'switch',\n      label: 'Switch'\n    }, {\n      type: 'divider',\n      label: 'Divider'\n    }, {\n      type: 'heading',\n      label: 'Heading'\n    }];\n    onMounted(async () => {\n      // Fetch all templates\n      await store.dispatch('fetchTemplates');\n      if (props.id) {\n        // Edit mode: fetch the form\n        try {\n          const fetchedForm = await store.dispatch('fetchFormById', props.id);\n          if (fetchedForm) {\n            Object.assign(form, fetchedForm);\n          }\n        } catch (error) {\n          ElMessage.error('Failed to load form');\n        }\n      } else if (form.templateId) {\n        // Creating form from template\n        await loadTemplateElements(form.templateId);\n      }\n    });\n    const loadTemplateElements = async templateId => {\n      if (!templateId) return;\n      templatesLoading.value = true;\n      try {\n        const template = await store.dispatch('fetchTemplateById', templateId);\n        if (template && template.elements) {\n          // Clone elements from template\n          form.elements = template.elements.map(element => ({\n            ...element,\n            id: uuidv4()\n          }));\n        }\n      } catch (error) {\n        ElMessage.error('Failed to load template elements');\n      } finally {\n        templatesLoading.value = false;\n      }\n    };\n    const onTemplateChange = async templateId => {\n      if (templateId) {\n        await loadTemplateElements(templateId);\n      } else {\n        form.elements = [];\n      }\n    };\n    const onDragStart = (event, element) => {\n      if (form.templateId) return; // Prevent dragging if using a template\n      event.dataTransfer.setData('element', JSON.stringify(element));\n    };\n    const onDrop = event => {\n      if (form.templateId) return; // Prevent dropping if using a template\n\n      const elementData = event.dataTransfer.getData('element');\n      if (elementData) {\n        const element = JSON.parse(elementData);\n\n        // Create new element with default properties\n        const newElement = {\n          id: uuidv4(),\n          type: element.type,\n          label: element.label,\n          name: element.type + '_' + Date.now(),\n          placeholder: '',\n          helperText: '',\n          required: false,\n          options: element.type === 'select' || element.type === 'radio' || element.type === 'checkbox' ? [{\n            label: 'Option 1',\n            value: 'option1'\n          }] : undefined\n        };\n        currentElement.value = {\n          ...newElement\n        };\n        isEditingElement.value = false;\n        elementDialogVisible.value = true;\n      }\n    };\n    const editElement = index => {\n      if (form.templateId) return; // Prevent editing if using a template\n\n      currentElement.value = {\n        ...form.elements[index]\n      };\n      currentElementIndex.value = index;\n      isEditingElement.value = true;\n      elementDialogVisible.value = true;\n    };\n    const removeElement = index => {\n      if (form.templateId) return; // Prevent removing if using a template\n      form.elements.splice(index, 1);\n    };\n    const addOption = () => {\n      if (!currentElement.value.options) {\n        currentElement.value.options = [];\n      }\n      const newOptionIndex = currentElement.value.options.length + 1;\n      currentElement.value.options.push({\n        label: `Option ${newOptionIndex}`,\n        value: `option${newOptionIndex}`\n      });\n    };\n    const removeOption = index => {\n      currentElement.value.options.splice(index, 1);\n    };\n    const saveElement = () => {\n      if (!currentElement.value.label || !currentElement.value.name) {\n        ElMessage.warning('Element label and name are required');\n        return;\n      }\n      if (isEditingElement.value) {\n        form.elements[currentElementIndex.value] = {\n          ...currentElement.value\n        };\n      } else {\n        form.elements.push({\n          ...currentElement.value\n        });\n      }\n      elementDialogVisible.value = false;\n      currentElementIndex.value = -1;\n      currentElement.value = {};\n    };\n    const saveForm = async () => {\n      if (!form.name) {\n        ElMessage.warning('Form name is required');\n        return;\n      }\n      try {\n        if (isEdit.value) {\n          await store.dispatch('updateForm', form);\n          ElMessage.success('Form updated successfully');\n        } else {\n          const newForm = await store.dispatch('createForm', form);\n          ElMessage.success('Form created successfully');\n          router.push(`/forms/${newForm._id}`);\n        }\n      } catch (error) {\n        ElMessage.error(`Failed to ${isEdit.value ? 'update' : 'create'} form`);\n      }\n    };\n    return {\n      form,\n      loading,\n      templatesLoading,\n      isEdit,\n      templates,\n      availableElements,\n      elementDialogVisible,\n      isEditingElement,\n      currentElement,\n      onTemplateChange,\n      onDragStart,\n      onDrop,\n      editElement,\n      removeElement,\n      addOption,\n      removeOption,\n      saveElement,\n      saveForm\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","onMounted","useStore","useRouter","useRoute","ElMessage","v4","uuidv4","name","props","id","type","String","required","setup","store","router","route","form","description","elements","templateId","query","isPublished","loading","getters","isLoading","templatesLoading","isEdit","elementDialogVisible","isEditingElement","currentElement","currentElementIndex","templates","availableElements","label","dispatch","fetchedForm","Object","assign","error","loadTemplateElements","value","template","map","element","onTemplateChange","onDragStart","event","dataTransfer","setData","JSON","stringify","onDrop","elementData","getData","parse","newElement","Date","now","placeholder","helperText","options","undefined","editElement","index","removeElement","splice","addOption","newOptionIndex","length","push","removeOption","saveElement","warning","saveForm","success","newForm","_id"],"sources":["/Users/mdtazbirurrahmanbhuiyan/Experiments/VueJS template buillder/VueJS-template-builder/frontend/src/views/forms/FormBuilder.vue"],"sourcesContent":["<template>\n  <div class=\"form-builder\">\n    <div class=\"page-header\">\n      <h1>{{ isEdit ? 'Edit Form' : 'Create Form' }}</h1>\n      <div class=\"header-actions\">\n        <el-button @click=\"$router.push('/forms')\">Cancel</el-button>\n        <el-button type=\"primary\" @click=\"saveForm\" :loading=\"loading\">\n          Save Form\n        </el-button>\n      </div>\n    </div>\n    \n    <el-row :gutter=\"20\">\n      <el-col :span=\"8\">\n        <el-card class=\"container form-settings\">\n          <h2>Form Settings</h2>\n          \n          <el-form label-position=\"top\">\n            <el-form-item label=\"Form Name\" required>\n              <el-input v-model=\"form.name\" placeholder=\"Enter form name\" />\n            </el-form-item>\n            \n            <el-form-item label=\"Description\">\n              <el-input\n                v-model=\"form.description\"\n                type=\"textarea\"\n                rows=\"3\"\n                placeholder=\"Enter form description\"\n              />\n            </el-form-item>\n            \n            <el-form-item>\n              <el-switch\n                v-model=\"form.isPublished\"\n                active-text=\"Published\"\n                inactive-text=\"Draft\"\n              />\n            </el-form-item>\n            \n            <el-form-item label=\"Based on Template\">\n              <el-select \n                v-model=\"form.templateId\"\n                placeholder=\"Select template\"\n                clearable\n                style=\"width: 100%\"\n                :disabled=\"isEdit\"\n                @change=\"onTemplateChange\"\n              >\n                <el-option\n                  v-for=\"template in templates\"\n                  :key=\"template._id\"\n                  :label=\"template.name\"\n                  :value=\"template._id\"\n                />\n              </el-select>\n            </el-form-item>\n          </el-form>\n          \n          <template v-if=\"!form.templateId\">\n            <h3>Available Elements</h3>\n            <div class=\"element-palette\">\n              <div\n                v-for=\"element in availableElements\"\n                :key=\"element.type\"\n                class=\"element-item\"\n                draggable=\"true\"\n                @dragstart=\"onDragStart($event, element)\"\n              >\n                <el-tag size=\"large\">{{ element.label }}</el-tag>\n              </div>\n            </div>\n          </template>\n        </el-card>\n      </el-col>\n      \n      <el-col :span=\"16\">\n        <el-card class=\"container form-canvas\">\n          <h2>Form Layout</h2>\n          \n          <div\n            class=\"form-drop-area\"\n            @drop=\"onDrop($event)\"\n            @dragover.prevent\n            @dragenter.prevent\n          >\n            <div v-if=\"form.elements && form.elements.length > 0\" class=\"form-elements\">\n              <div\n                v-for=\"(element, index) in form.elements\"\n                :key=\"element.id || index\"\n                class=\"form-element\"\n                :class=\"{ 'template-element': form.templateId }\"\n              >\n                <div class=\"element-header\">\n                  <span>{{ element.label }}</span>\n                  <div class=\"element-actions\">\n                    <el-button size=\"small\" @click=\"editElement(index)\" :disabled=\"form.templateId\">Edit</el-button>\n                    <el-button size=\"small\" type=\"danger\" @click=\"removeElement(index)\" :disabled=\"form.templateId\">Remove</el-button>\n                  </div>\n                </div>\n                \n                <div class=\"element-preview\">\n                  <!-- Text Input -->\n                  <el-input \n                    v-if=\"element.type === 'text' || element.type === 'email' || element.type === 'password'\"\n                    :type=\"element.type\"\n                    :placeholder=\"element.placeholder\"\n                    disabled\n                  />\n                  \n                  <!-- Textarea -->\n                  <el-input \n                    v-else-if=\"element.type === 'textarea'\"\n                    type=\"textarea\"\n                    :rows=\"3\"\n                    :placeholder=\"element.placeholder\"\n                    disabled\n                  />\n                  \n                  <!-- Number Input -->\n                  <el-input-number \n                    v-else-if=\"element.type === 'number'\"\n                    disabled\n                    controls-position=\"right\"\n                  />\n                  \n                  <!-- Select -->\n                  <el-select\n                    v-else-if=\"element.type === 'select'\"\n                    :placeholder=\"element.placeholder\"\n                    disabled\n                    style=\"width: 100%\"\n                  >\n                    <el-option\n                      v-for=\"option in element.options\"\n                      :key=\"option.value\"\n                      :label=\"option.label\"\n                      :value=\"option.value\"\n                    />\n                  </el-select>\n                  \n                  <!-- Radio Buttons -->\n                  <el-radio-group v-else-if=\"element.type === 'radio'\" disabled>\n                    <el-radio\n                      v-for=\"option in element.options\"\n                      :key=\"option.value\"\n                      :label=\"option.value\"\n                    >\n                      {{ option.label }}\n                    </el-radio>\n                  </el-radio-group>\n                  \n                  <!-- Checkboxes -->\n                  <el-checkbox-group v-else-if=\"element.type === 'checkbox'\" disabled>\n                    <el-checkbox\n                      v-for=\"option in element.options\"\n                      :key=\"option.value\"\n                      :label=\"option.value\"\n                    >\n                      {{ option.label }}\n                    </el-checkbox>\n                  </el-checkbox-group>\n                  \n                  <!-- Date Picker -->\n                  <el-date-picker\n                    v-else-if=\"element.type === 'date'\"\n                    type=\"date\"\n                    :placeholder=\"element.placeholder || 'Select date'\"\n                    style=\"width: 100%\"\n                    disabled\n                  />\n                  \n                  <!-- Time Picker -->\n                  <el-time-picker\n                    v-else-if=\"element.type === 'time'\"\n                    :placeholder=\"element.placeholder || 'Select time'\"\n                    style=\"width: 100%\"\n                    disabled\n                  />\n                  \n                  <!-- File Upload -->\n                  <el-upload\n                    v-else-if=\"element.type === 'file'\"\n                    action=\"#\"\n                    :auto-upload=\"false\"\n                    disabled\n                  >\n                    <el-button type=\"primary\" disabled>Click to upload</el-button>\n                  </el-upload>\n                  \n                  <!-- Slider -->\n                  <el-slider v-else-if=\"element.type === 'slider'\" disabled />\n                  \n                  <!-- Switch -->\n                  <el-switch v-else-if=\"element.type === 'switch'\" disabled />\n                  \n                  <!-- Heading -->\n                  <h4 v-else-if=\"element.type === 'heading'\">{{ element.label }}</h4>\n                  \n                  <!-- Divider -->\n                  <el-divider v-else-if=\"element.type === 'divider'\" />\n                  \n                  <!-- Default case -->\n                  <div v-else>{{ element.type }} element</div>\n                </div>\n              </div>\n            </div>\n            \n            <div v-else-if=\"form.templateId && templatesLoading\" class=\"loading-template\">\n              <el-skeleton :rows=\"5\" animated />\n            </div>\n            \n            <div v-else class=\"empty-form\">\n              <el-empty description=\"Drag elements here to build your form\" />\n            </div>\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n    \n    <el-dialog\n      v-model=\"elementDialogVisible\"\n      :title=\"isEditingElement ? 'Edit Element' : 'Add Element'\"\n      width=\"50%\"\n    >\n      <el-form label-position=\"top\">\n        <el-form-item label=\"Label\" required>\n          <el-input v-model=\"currentElement.label\" placeholder=\"Enter element label\" />\n        </el-form-item>\n        \n        <el-form-item label=\"Name\" required>\n          <el-input v-model=\"currentElement.name\" placeholder=\"Enter element name\" />\n        </el-form-item>\n        \n        <el-form-item label=\"Placeholder\">\n          <el-input v-model=\"currentElement.placeholder\" placeholder=\"Enter placeholder text\" />\n        </el-form-item>\n        \n        <el-form-item label=\"Helper Text\">\n          <el-input v-model=\"currentElement.helperText\" placeholder=\"Enter helper text\" />\n        </el-form-item>\n        \n        <el-form-item>\n          <el-switch\n            v-model=\"currentElement.required\"\n            active-text=\"Required\"\n            inactive-text=\"Optional\"\n          />\n        </el-form-item>\n        \n        <el-form-item v-if=\"currentElement.type === 'select' || currentElement.type === 'radio' || currentElement.type === 'checkbox'\">\n          <h4>Options</h4>\n          <div v-for=\"(option, index) in currentElement.options\" :key=\"index\" class=\"option-item\">\n            <el-input v-model=\"option.label\" placeholder=\"Option label\" />\n            <el-input v-model=\"option.value\" placeholder=\"Option value\" />\n            <el-button type=\"danger\" icon=\"el-icon-delete\" circle @click=\"removeOption(index)\" />\n          </div>\n          <el-button type=\"primary\" @click=\"addOption\">Add Option</el-button>\n        </el-form-item>\n      </el-form>\n      \n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"elementDialogVisible = false\">Cancel</el-button>\n          <el-button type=\"primary\" @click=\"saveElement\">Save</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRouter, useRoute } from 'vue-router'\nimport { ElMessage } from 'element-plus'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport default {\n  name: 'FormBuilder',\n  props: {\n    id: {\n      type: String,\n      required: false\n    }\n  },\n  \n  setup(props) {\n    const store = useStore()\n    const router = useRouter()\n    const route = useRoute()\n    \n    const form = reactive({\n      name: '',\n      description: '',\n      elements: [],\n      templateId: route.query.templateId || null,\n      isPublished: false\n    })\n    \n    const loading = computed(() => store.getters.isLoading)\n    const templatesLoading = ref(false)\n    const isEdit = computed(() => !!props.id)\n    \n    const elementDialogVisible = ref(false)\n    const isEditingElement = ref(false)\n    const currentElement = ref({})\n    const currentElementIndex = ref(-1)\n    \n    const templates = computed(() => store.getters.templates)\n    \n    const availableElements = [\n      { type: 'text', label: 'Text Input' },\n      { type: 'textarea', label: 'Text Area' },\n      { type: 'number', label: 'Number' },\n      { type: 'email', label: 'Email' },\n      { type: 'password', label: 'Password' },\n      { type: 'select', label: 'Dropdown' },\n      { type: 'radio', label: 'Radio Buttons' },\n      { type: 'checkbox', label: 'Checkboxes' },\n      { type: 'date', label: 'Date Picker' },\n      { type: 'time', label: 'Time Picker' },\n      { type: 'file', label: 'File Upload' },\n      { type: 'slider', label: 'Slider' },\n      { type: 'switch', label: 'Switch' },\n      { type: 'divider', label: 'Divider' },\n      { type: 'heading', label: 'Heading' }\n    ]\n    \n    onMounted(async () => {\n      // Fetch all templates\n      await store.dispatch('fetchTemplates')\n      \n      if (props.id) {\n        // Edit mode: fetch the form\n        try {\n          const fetchedForm = await store.dispatch('fetchFormById', props.id)\n          if (fetchedForm) {\n            Object.assign(form, fetchedForm)\n          }\n        } catch (error) {\n          ElMessage.error('Failed to load form')\n        }\n      } else if (form.templateId) {\n        // Creating form from template\n        await loadTemplateElements(form.templateId)\n      }\n    })\n    \n    const loadTemplateElements = async (templateId) => {\n      if (!templateId) return\n      \n      templatesLoading.value = true\n      try {\n        const template = await store.dispatch('fetchTemplateById', templateId)\n        if (template && template.elements) {\n          // Clone elements from template\n          form.elements = template.elements.map(element => ({ ...element, id: uuidv4() }))\n        }\n      } catch (error) {\n        ElMessage.error('Failed to load template elements')\n      } finally {\n        templatesLoading.value = false\n      }\n    }\n    \n    const onTemplateChange = async (templateId) => {\n      if (templateId) {\n        await loadTemplateElements(templateId)\n      } else {\n        form.elements = []\n      }\n    }\n    \n    const onDragStart = (event, element) => {\n      if (form.templateId) return // Prevent dragging if using a template\n      event.dataTransfer.setData('element', JSON.stringify(element))\n    }\n    \n    const onDrop = (event) => {\n      if (form.templateId) return // Prevent dropping if using a template\n      \n      const elementData = event.dataTransfer.getData('element')\n      if (elementData) {\n        const element = JSON.parse(elementData)\n        \n        // Create new element with default properties\n        const newElement = {\n          id: uuidv4(),\n          type: element.type,\n          label: element.label,\n          name: element.type + '_' + Date.now(),\n          placeholder: '',\n          helperText: '',\n          required: false,\n          options: element.type === 'select' || element.type === 'radio' || element.type === 'checkbox' \n            ? [{ label: 'Option 1', value: 'option1' }] \n            : undefined\n        }\n        \n        currentElement.value = { ...newElement }\n        isEditingElement.value = false\n        elementDialogVisible.value = true\n      }\n    }\n    \n    const editElement = (index) => {\n      if (form.templateId) return // Prevent editing if using a template\n      \n      currentElement.value = { ...form.elements[index] }\n      currentElementIndex.value = index\n      isEditingElement.value = true\n      elementDialogVisible.value = true\n    }\n    \n    const removeElement = (index) => {\n      if (form.templateId) return // Prevent removing if using a template\n      form.elements.splice(index, 1)\n    }\n    \n    const addOption = () => {\n      if (!currentElement.value.options) {\n        currentElement.value.options = []\n      }\n      \n      const newOptionIndex = currentElement.value.options.length + 1\n      currentElement.value.options.push({\n        label: `Option ${newOptionIndex}`,\n        value: `option${newOptionIndex}`\n      })\n    }\n    \n    const removeOption = (index) => {\n      currentElement.value.options.splice(index, 1)\n    }\n    \n    const saveElement = () => {\n      if (!currentElement.value.label || !currentElement.value.name) {\n        ElMessage.warning('Element label and name are required')\n        return\n      }\n      \n      if (isEditingElement.value) {\n        form.elements[currentElementIndex.value] = { ...currentElement.value }\n      } else {\n        form.elements.push({ ...currentElement.value })\n      }\n      \n      elementDialogVisible.value = false\n      currentElementIndex.value = -1\n      currentElement.value = {}\n    }\n    \n    const saveForm = async () => {\n      if (!form.name) {\n        ElMessage.warning('Form name is required')\n        return\n      }\n      \n      try {\n        if (isEdit.value) {\n          await store.dispatch('updateForm', form)\n          ElMessage.success('Form updated successfully')\n        } else {\n          const newForm = await store.dispatch('createForm', form)\n          ElMessage.success('Form created successfully')\n          router.push(`/forms/${newForm._id}`)\n        }\n      } catch (error) {\n        ElMessage.error(`Failed to ${isEdit.value ? 'update' : 'create'} form`)\n      }\n    }\n    \n    return {\n      form,\n      loading,\n      templatesLoading,\n      isEdit,\n      templates,\n      availableElements,\n      elementDialogVisible,\n      isEditingElement,\n      currentElement,\n      onTemplateChange,\n      onDragStart,\n      onDrop,\n      editElement,\n      removeElement,\n      addOption,\n      removeOption,\n      saveElement,\n      saveForm\n    }\n  }\n}\n</script>\n\n<style scoped>\n.form-builder {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.header-actions {\n  display: flex;\n  gap: 1rem;\n}\n\n.form-settings, .form-canvas {\n  height: 100%;\n}\n\n.element-palette {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-top: 1rem;\n}\n\n.element-item {\n  cursor: move;\n}\n\n.form-drop-area {\n  min-height: 400px;\n  border: 2px dashed #dcdfe6;\n  border-radius: 6px;\n  padding: 1rem;\n  margin-top: 1rem;\n}\n\n.empty-form, .loading-template {\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #909399;\n  padding: 2rem 0;\n}\n\n.form-element {\n  border: 1px solid #dcdfe6;\n  border-radius: 4px;\n  margin-bottom: 1rem;\n  padding: 1rem;\n  background-color: #f5f7fa;\n}\n\n.template-element {\n  background-color: #ecf5ff;\n  border: 1px solid #d9ecff;\n}\n\n.element-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 0.5rem;\n}\n\n.element-actions {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.element-preview {\n  background-color: white;\n  padding: 0.5rem;\n  border: 1px solid #ebeef5;\n  border-radius: 4px;\n}\n\n.option-item {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 10px;\n  align-items: center;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
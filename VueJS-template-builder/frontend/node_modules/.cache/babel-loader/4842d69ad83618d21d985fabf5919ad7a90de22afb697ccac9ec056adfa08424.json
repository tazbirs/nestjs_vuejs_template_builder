{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'TemplatePreview',\n  props: {\n    id: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props) {\n    const store = useStore();\n    const router = useRouter();\n    const loading = computed(() => store.getters.isLoading);\n    const template = computed(() => store.getters.currentTemplate);\n    onMounted(async () => {\n      try {\n        await store.dispatch('fetchTemplateById', props.id);\n      } catch (error) {\n        ElMessage.error('Failed to load template');\n      }\n    });\n    const createFormFromTemplate = () => {\n      // In a real app, this would create a new form based on the template\n      // For now, we just navigate to the form creation page\n      router.push({\n        path: '/forms/new',\n        query: {\n          templateId: props.id\n        }\n      });\n    };\n    return {\n      loading,\n      template,\n      createFormFromTemplate\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useStore","useRouter","ElMessage","name","props","id","type","String","required","setup","store","router","loading","getters","isLoading","template","currentTemplate","dispatch","error","createFormFromTemplate","push","path","query","templateId"],"sources":["/Users/mdtazbirurrahmanbhuiyan/Experiments/VueJS template buillder/VueJS-template-builder/frontend/src/views/templates/TemplatePreview.vue"],"sourcesContent":["<template>\n  <div class=\"template-preview\">\n    <div class=\"page-header\">\n      <h1>Template Preview: {{ template?.name }}</h1>\n      <div class=\"header-actions\">\n        <el-button @click=\"$router.push('/templates')\">Back to Templates</el-button>\n        <el-button type=\"primary\" @click=\"$router.push(`/templates/${id}`)\">Edit Template</el-button>\n        <el-button type=\"success\" @click=\"createFormFromTemplate\">Create Form</el-button>\n      </div>\n    </div>\n    \n    <el-card class=\"container preview-container\">\n      <template v-if=\"loading\">\n        <div class=\"loading-state\">\n          <el-skeleton :rows=\"6\" animated />\n        </div>\n      </template>\n      \n      <template v-else-if=\"template\">\n        <div class=\"template-info\">\n          <h2>{{ template.name }}</h2>\n          <p v-if=\"template.description\">{{ template.description }}</p>\n          <el-tag :type=\"template.isPublished ? 'success' : 'info'\">\n            {{ template.isPublished ? 'Published' : 'Draft' }}\n          </el-tag>\n        </div>\n        \n        <el-divider />\n        \n        <div class=\"form-preview\">\n          <h3>Form Elements</h3>\n          \n          <template v-if=\"template.elements && template.elements.length > 0\">\n            <div v-for=\"(element, index) in template.elements\" :key=\"index\" class=\"preview-element\">\n              <div class=\"element-label\">\n                <label>\n                  {{ element.label }}\n                  <span v-if=\"element.required\" class=\"required-marker\">*</span>\n                </label>\n                <small v-if=\"element.helperText\" class=\"helper-text\">{{ element.helperText }}</small>\n              </div>\n              \n              <div class=\"element-control\">\n                <!-- Text Input -->\n                <el-input \n                  v-if=\"element.type === 'text' || element.type === 'email' || element.type === 'password'\"\n                  :type=\"element.type\"\n                  :placeholder=\"element.placeholder\"\n                  disabled\n                />\n                \n                <!-- Textarea -->\n                <el-input \n                  v-else-if=\"element.type === 'textarea'\"\n                  type=\"textarea\"\n                  :rows=\"3\"\n                  :placeholder=\"element.placeholder\"\n                  disabled\n                />\n                \n                <!-- Number Input -->\n                <el-input-number \n                  v-else-if=\"element.type === 'number'\"\n                  disabled\n                  controls-position=\"right\"\n                />\n                \n                <!-- Select -->\n                <el-select\n                  v-else-if=\"element.type === 'select'\"\n                  :placeholder=\"element.placeholder\"\n                  disabled\n                  style=\"width: 100%\"\n                >\n                  <el-option\n                    v-for=\"option in element.options\"\n                    :key=\"option.value\"\n                    :label=\"option.label\"\n                    :value=\"option.value\"\n                  />\n                </el-select>\n                \n                <!-- Radio Buttons -->\n                <el-radio-group v-else-if=\"element.type === 'radio'\" disabled>\n                  <el-radio\n                    v-for=\"option in element.options\"\n                    :key=\"option.value\"\n                    :label=\"option.value\"\n                  >\n                    {{ option.label }}\n                  </el-radio>\n                </el-radio-group>\n                \n                <!-- Checkboxes -->\n                <el-checkbox-group v-else-if=\"element.type === 'checkbox'\" disabled>\n                  <el-checkbox\n                    v-for=\"option in element.options\"\n                    :key=\"option.value\"\n                    :label=\"option.value\"\n                  >\n                    {{ option.label }}\n                  </el-checkbox>\n                </el-checkbox-group>\n                \n                <!-- Date Picker -->\n                <el-date-picker\n                  v-else-if=\"element.type === 'date'\"\n                  type=\"date\"\n                  :placeholder=\"element.placeholder || 'Select date'\"\n                  style=\"width: 100%\"\n                  disabled\n                />\n                \n                <!-- Time Picker -->\n                <el-time-picker\n                  v-else-if=\"element.type === 'time'\"\n                  :placeholder=\"element.placeholder || 'Select time'\"\n                  style=\"width: 100%\"\n                  disabled\n                />\n                \n                <!-- File Upload -->\n                <el-upload\n                  v-else-if=\"element.type === 'file'\"\n                  action=\"#\"\n                  :auto-upload=\"false\"\n                  disabled\n                >\n                  <el-button type=\"primary\" disabled>Click to upload</el-button>\n                </el-upload>\n                \n                <!-- Slider -->\n                <el-slider v-else-if=\"element.type === 'slider'\" disabled />\n                \n                <!-- Switch -->\n                <el-switch v-else-if=\"element.type === 'switch'\" disabled />\n                \n                <!-- Heading -->\n                <h4 v-else-if=\"element.type === 'heading'\">{{ element.label }}</h4>\n                \n                <!-- Divider -->\n                <el-divider v-else-if=\"element.type === 'divider'\" />\n                \n                <!-- Default case -->\n                <div v-else>{{ element.type }} element</div>\n              </div>\n            </div>\n          </template>\n          \n          <div v-else class=\"empty-preview\">\n            <el-empty description=\"This template has no elements yet\" />\n          </div>\n        </div>\n      </template>\n      \n      <template v-else>\n        <el-empty description=\"Template not found\" />\n      </template>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRouter } from 'vue-router'\nimport { ElMessage } from 'element-plus'\n\nexport default {\n  name: 'TemplatePreview',\n  props: {\n    id: {\n      type: String,\n      required: true\n    }\n  },\n  \n  setup(props) {\n    const store = useStore()\n    const router = useRouter()\n    \n    const loading = computed(() => store.getters.isLoading)\n    const template = computed(() => store.getters.currentTemplate)\n    \n    onMounted(async () => {\n      try {\n        await store.dispatch('fetchTemplateById', props.id)\n      } catch (error) {\n        ElMessage.error('Failed to load template')\n      }\n    })\n    \n    const createFormFromTemplate = () => {\n      // In a real app, this would create a new form based on the template\n      // For now, we just navigate to the form creation page\n      router.push({\n        path: '/forms/new',\n        query: { templateId: props.id }\n      })\n    }\n    \n    return {\n      loading,\n      template,\n      createFormFromTemplate\n    }\n  }\n}\n</script>\n\n<style scoped>\n.template-preview {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.preview-container {\n  padding: 2rem;\n}\n\n.header-actions {\n  display: flex;\n  gap: 1rem;\n}\n\n.template-info {\n  margin-bottom: 2rem;\n}\n\n.preview-element {\n  margin-bottom: 1.5rem;\n}\n\n.element-label {\n  margin-bottom: 0.5rem;\n}\n\n.element-label label {\n  font-weight: bold;\n  font-size: 0.9rem;\n}\n\n.required-marker {\n  color: #f56c6c;\n  margin-left: 4px;\n}\n\n.helper-text {\n  display: block;\n  font-size: 0.8rem;\n  color: #909399;\n  margin-top: 0.25rem;\n}\n\n.loading-state {\n  padding: 2rem 0;\n}\n\n.empty-preview {\n  padding: 2rem 0;\n}\n</style>\n"],"mappings":";AAmKA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAQ,QAAS,KAAI;AAC7C,SAASC,QAAO,QAAS,MAAK;AAC9B,SAASC,SAAQ,QAAS,YAAW;AACrC,SAASC,SAAQ,QAAS,cAAa;AAEvC,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,KAAK,EAAE;IACLC,EAAE,EAAE;MACFC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EAEDC,KAAKA,CAACL,KAAK,EAAE;IACX,MAAMM,KAAI,GAAIV,QAAQ,CAAC;IACvB,MAAMW,MAAK,GAAIV,SAAS,CAAC;IAEzB,MAAMW,OAAM,GAAId,QAAQ,CAAC,MAAMY,KAAK,CAACG,OAAO,CAACC,SAAS;IACtD,MAAMC,QAAO,GAAIjB,QAAQ,CAAC,MAAMY,KAAK,CAACG,OAAO,CAACG,eAAe;IAE7DjB,SAAS,CAAC,YAAY;MACpB,IAAI;QACF,MAAMW,KAAK,CAACO,QAAQ,CAAC,mBAAmB,EAAEb,KAAK,CAACC,EAAE;MACpD,EAAE,OAAOa,KAAK,EAAE;QACdhB,SAAS,CAACgB,KAAK,CAAC,yBAAyB;MAC3C;IACF,CAAC;IAED,MAAMC,sBAAqB,GAAIA,CAAA,KAAM;MACnC;MACA;MACAR,MAAM,CAACS,IAAI,CAAC;QACVC,IAAI,EAAE,YAAY;QAClBC,KAAK,EAAE;UAAEC,UAAU,EAAEnB,KAAK,CAACC;QAAG;MAChC,CAAC;IACH;IAEA,OAAO;MACLO,OAAO;MACPG,QAAQ;MACRI;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
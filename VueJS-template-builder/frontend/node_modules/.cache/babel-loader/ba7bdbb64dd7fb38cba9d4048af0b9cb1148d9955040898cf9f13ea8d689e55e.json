{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { ref, reactive, computed, onMounted, watch } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport { QuestionFilled } from '@element-plus/icons-vue';\nexport default {\n  name: 'FormView',\n  components: {\n    QuestionFilled\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const store = useStore();\n    // Removed unused router variable\n    const formRef = ref(null);\n    const loading = computed(() => store.getters.isLoading);\n    const form = computed(() => store.getters.currentForm);\n    const formValues = reactive({});\n    const submissionDialogVisible = ref(false);\n    onMounted(async () => {\n      try {\n        await store.dispatch('fetchFormById', props.id);\n      } catch (error) {\n        ElMessage.error('Failed to load form');\n      }\n    });\n\n    // Initialize form values whenever form changes\n    watch(form, newForm => {\n      if (newForm && newForm.elements) {\n        newForm.elements.forEach(element => {\n          if (element.type !== 'divider' && element.type !== 'heading') {\n            formValues[element.name] = element.defaultValue || getDefaultValueForType(element.type);\n          }\n        });\n      }\n    }, {\n      immediate: true\n    });\n    const getDefaultValueForType = type => {\n      switch (type) {\n        case 'checkbox':\n          return [];\n        case 'number':\n          return 0;\n        case 'switch':\n          return false;\n        case 'slider':\n          return 0;\n        case 'file':\n          return [];\n        default:\n          return '';\n      }\n    };\n    const submitForm = () => {\n      if (formRef.value) {\n        formRef.value.validate(valid => {\n          if (valid) {\n            // In a real app, you'd send this data to the backend\n            ElMessage.success('Form submitted successfully');\n            submissionDialogVisible.value = true;\n          } else {\n            ElMessage.error('Please complete all required fields');\n            return false;\n          }\n        });\n      }\n    };\n    const resetForm = () => {\n      if (formRef.value) {\n        formRef.value.resetFields();\n      }\n    };\n    return {\n      loading,\n      form,\n      formRef,\n      formValues,\n      submitForm,\n      resetForm,\n      submissionDialogVisible\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","onMounted","watch","useStore","useRouter","ElMessage","QuestionFilled","name","components","props","id","type","String","required","readonly","Boolean","default","setup","store","formRef","loading","getters","isLoading","form","currentForm","formValues","submissionDialogVisible","dispatch","error","newForm","elements","forEach","element","defaultValue","getDefaultValueForType","immediate","submitForm","value","validate","valid","success","resetForm","resetFields"],"sources":["/Users/mdtazbirurrahmanbhuiyan/Experiments/VueJS template buillder/VueJS-template-builder/frontend/src/views/forms/FormView.vue"],"sourcesContent":["<template>\n  <div class=\"form-view\">\n    <div class=\"page-header\">\n      <h1>Form: {{ form?.name }}</h1>\n      <div class=\"header-actions\">\n        <el-button @click=\"$router.push('/forms')\">Back to Forms</el-button>\n        <el-button type=\"primary\" @click=\"$router.push(`/forms/${id}`)\">Edit Form</el-button>\n        <el-button type=\"success\" @click=\"submitForm\" v-if=\"!readonly\">Submit</el-button>\n      </div>\n    </div>\n    \n    <el-card class=\"container form-container\">\n      <template v-if=\"loading\">\n        <div class=\"loading-state\">\n          <el-skeleton :rows=\"6\" animated />\n        </div>\n      </template>\n      \n      <template v-else-if=\"form\">\n        <div class=\"form-info\">\n          <h2>{{ form.name }}</h2>\n          <p v-if=\"form.description\">{{ form.description }}</p>\n        </div>\n        \n        <el-divider />\n        \n        <el-form \n          ref=\"formRef\"\n          :model=\"formValues\"\n          label-position=\"top\"\n          :disabled=\"readonly\"\n        >\n          <template v-if=\"form.elements && form.elements.length > 0\">\n            <div v-for=\"(element, index) in form.elements\" :key=\"element.id || index\" class=\"form-item-wrapper\">\n              <el-form-item \n                :label=\"element.label\"\n                :prop=\"element.name\"\n                :required=\"element.required\"\n              >\n                <!-- Helper Text -->\n                <template #label v-if=\"element.helperText\">\n                  <div>\n                    {{ element.label }}\n                    <el-tooltip :content=\"element.helperText\" placement=\"top\">\n                      <el-icon><QuestionFilled /></el-icon>\n                    </el-tooltip>\n                  </div>\n                </template>\n                \n                <!-- Text Input -->\n                <el-input \n                  v-if=\"element.type === 'text'\"\n                  v-model=\"formValues[element.name]\"\n                  :placeholder=\"element.placeholder\"\n                />\n                \n                <!-- Email Input -->\n                <el-input \n                  v-else-if=\"element.type === 'email'\"\n                  v-model=\"formValues[element.name]\"\n                  :placeholder=\"element.placeholder\"\n                  type=\"email\"\n                />\n                \n                <!-- Password Input -->\n                <el-input \n                  v-else-if=\"element.type === 'password'\"\n                  v-model=\"formValues[element.name]\"\n                  :placeholder=\"element.placeholder\"\n                  type=\"password\"\n                  show-password\n                />\n                \n                <!-- Textarea -->\n                <el-input \n                  v-else-if=\"element.type === 'textarea'\"\n                  v-model=\"formValues[element.name]\"\n                  type=\"textarea\"\n                  :rows=\"3\"\n                  :placeholder=\"element.placeholder\"\n                />\n                \n                <!-- Number Input -->\n                <el-input-number \n                  v-else-if=\"element.type === 'number'\"\n                  v-model=\"formValues[element.name]\"\n                  controls-position=\"right\"\n                  style=\"width: 100%\"\n                />\n                \n                <!-- Select -->\n                <el-select\n                  v-else-if=\"element.type === 'select'\"\n                  v-model=\"formValues[element.name]\"\n                  :placeholder=\"element.placeholder\"\n                  style=\"width: 100%\"\n                >\n                  <el-option\n                    v-for=\"option in element.options\"\n                    :key=\"option.value\"\n                    :label=\"option.label\"\n                    :value=\"option.value\"\n                  />\n                </el-select>\n                \n                <!-- Radio Buttons -->\n                <el-radio-group v-else-if=\"element.type === 'radio'\" v-model=\"formValues[element.name]\">\n                  <el-radio\n                    v-for=\"option in element.options\"\n                    :key=\"option.value\"\n                    :label=\"option.value\"\n                  >\n                    {{ option.label }}\n                  </el-radio>\n                </el-radio-group>\n                \n                <!-- Checkboxes -->\n                <el-checkbox-group v-else-if=\"element.type === 'checkbox'\" v-model=\"formValues[element.name]\">\n                  <el-checkbox\n                    v-for=\"option in element.options\"\n                    :key=\"option.value\"\n                    :label=\"option.value\"\n                  >\n                    {{ option.label }}\n                  </el-checkbox>\n                </el-checkbox-group>\n                \n                <!-- Date Picker -->\n                <el-date-picker\n                  v-else-if=\"element.type === 'date'\"\n                  v-model=\"formValues[element.name]\"\n                  type=\"date\"\n                  :placeholder=\"element.placeholder || 'Select date'\"\n                  style=\"width: 100%\"\n                />\n                \n                <!-- Time Picker -->\n                <el-time-picker\n                  v-else-if=\"element.type === 'time'\"\n                  v-model=\"formValues[element.name]\"\n                  :placeholder=\"element.placeholder || 'Select time'\"\n                  style=\"width: 100%\"\n                />\n                \n                <!-- File Upload -->\n                <el-upload\n                  v-else-if=\"element.type === 'file'\"\n                  action=\"#\"\n                  :auto-upload=\"false\"\n                  v-model:file-list=\"formValues[element.name]\"\n                >\n                  <el-button type=\"primary\">Click to upload</el-button>\n                </el-upload>\n                \n                <!-- Slider -->\n                <el-slider v-else-if=\"element.type === 'slider'\" v-model=\"formValues[element.name]\" />\n                \n                <!-- Switch -->\n                <el-switch v-else-if=\"element.type === 'switch'\" v-model=\"formValues[element.name]\" />\n                \n                <!-- Heading -->\n                <h4 v-else-if=\"element.type === 'heading'\">{{ element.label }}</h4>\n                \n                <!-- Divider -->\n                <el-divider v-else-if=\"element.type === 'divider'\" />\n                \n                <!-- Default case -->\n                <div v-else>{{ element.type }} element</div>\n              </el-form-item>\n            </div>\n          </template>\n          \n          <div v-else class=\"empty-form\">\n            <el-empty description=\"This form has no elements\" />\n          </div>\n          \n          <div class=\"form-actions\" v-if=\"form.elements?.length && !readonly\">\n            <el-button type=\"primary\" @click=\"submitForm\">Submit Form</el-button>\n            <el-button @click=\"resetForm\">Reset</el-button>\n          </div>\n        </el-form>\n      </template>\n      \n      <template v-else>\n        <el-empty description=\"Form not found\" />\n      </template>\n    </el-card>\n    \n    <el-dialog\n      v-model=\"submissionDialogVisible\"\n      title=\"Form Submitted\"\n      width=\"50%\"\n    >\n      <h3>Form Values:</h3>\n      <pre>{{ JSON.stringify(formValues, null, 2) }}</pre>\n      \n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"submissionDialogVisible = false\">Close</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, computed, onMounted, watch } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRouter } from 'vue-router'\nimport { ElMessage } from 'element-plus'\nimport { QuestionFilled } from '@element-plus/icons-vue'\n\nexport default {\n  name: 'FormView',\n  components: {\n    QuestionFilled\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    }\n  },\n  \n  setup(props) {\n    const store = useStore()\n    // Removed unused router variable\n    const formRef = ref(null)\n    \n    const loading = computed(() => store.getters.isLoading)\n    const form = computed(() => store.getters.currentForm)\n    \n    const formValues = reactive({})\n    const submissionDialogVisible = ref(false)\n    \n    onMounted(async () => {\n      try {\n        await store.dispatch('fetchFormById', props.id)\n      } catch (error) {\n        ElMessage.error('Failed to load form')\n      }\n    })\n    \n    // Initialize form values whenever form changes\n    watch(form, (newForm) => {\n      if (newForm && newForm.elements) {\n        newForm.elements.forEach(element => {\n          if (element.type !== 'divider' && element.type !== 'heading') {\n            formValues[element.name] = element.defaultValue || getDefaultValueForType(element.type)\n          }\n        })\n      }\n    }, { immediate: true })\n    \n    const getDefaultValueForType = (type) => {\n      switch (type) {\n        case 'checkbox': return []\n        case 'number': return 0\n        case 'switch': return false\n        case 'slider': return 0\n        case 'file': return []\n        default: return ''\n      }\n    }\n    \n    const submitForm = () => {\n      if (formRef.value) {\n        formRef.value.validate((valid) => {\n          if (valid) {\n            // In a real app, you'd send this data to the backend\n            ElMessage.success('Form submitted successfully')\n            submissionDialogVisible.value = true\n          } else {\n            ElMessage.error('Please complete all required fields')\n            return false\n          }\n        })\n      }\n    }\n    \n    const resetForm = () => {\n      if (formRef.value) {\n        formRef.value.resetFields()\n      }\n    }\n    \n    return {\n      loading,\n      form,\n      formRef,\n      formValues,\n      submitForm,\n      resetForm,\n      submissionDialogVisible\n    }\n  }\n}\n</script>\n\n<style scoped>\n.form-view {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.header-actions {\n  display: flex;\n  gap: 1rem;\n}\n\n.form-container {\n  padding: 2rem;\n}\n\n.form-info {\n  margin-bottom: 1.5rem;\n}\n\n.form-item-wrapper {\n  margin-bottom: 1.5rem;\n}\n\n.loading-state {\n  padding: 2rem 0;\n}\n\n.empty-form {\n  padding: 2rem 0;\n  text-align: center;\n}\n\n.form-actions {\n  margin-top: 2rem;\n  display: flex;\n  justify-content: flex-end;\n  gap: 1rem;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
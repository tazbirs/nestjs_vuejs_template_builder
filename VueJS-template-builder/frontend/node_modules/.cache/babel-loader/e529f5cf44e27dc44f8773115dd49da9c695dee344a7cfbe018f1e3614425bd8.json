{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, reactive, computed, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter, useRoute } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport { v4 as uuidv4 } from 'uuid';\nexport default {\n  name: 'TemplateForm',\n  props: {\n    id: {\n      type: String,\n      required: false\n    }\n  },\n  setup(props) {\n    const store = useStore();\n    const router = useRouter();\n    // Removed unused route variable\n\n    const template = reactive({\n      name: '',\n      description: '',\n      elements: [],\n      isPublished: false\n    });\n    const loading = computed(() => store.getters.isLoading);\n    const isEdit = computed(() => !!props.id);\n    const elementDialogVisible = ref(false);\n    const isEditingElement = ref(false);\n    const currentElement = ref({});\n    const currentElementIndex = ref(-1);\n    const availableElements = [{\n      type: 'text',\n      label: 'Text Input'\n    }, {\n      type: 'textarea',\n      label: 'Text Area'\n    }, {\n      type: 'number',\n      label: 'Number'\n    }, {\n      type: 'email',\n      label: 'Email'\n    }, {\n      type: 'password',\n      label: 'Password'\n    }, {\n      type: 'select',\n      label: 'Dropdown'\n    }, {\n      type: 'radio',\n      label: 'Radio Buttons'\n    }, {\n      type: 'checkbox',\n      label: 'Checkboxes'\n    }, {\n      type: 'date',\n      label: 'Date Picker'\n    }, {\n      type: 'time',\n      label: 'Time Picker'\n    }, {\n      type: 'file',\n      label: 'File Upload'\n    }, {\n      type: 'slider',\n      label: 'Slider'\n    }, {\n      type: 'switch',\n      label: 'Switch'\n    }, {\n      type: 'divider',\n      label: 'Divider'\n    }, {\n      type: 'heading',\n      label: 'Heading'\n    }];\n    onMounted(async () => {\n      if (props.id) {\n        try {\n          const fetchedTemplate = await store.dispatch('fetchTemplateById', props.id);\n          if (fetchedTemplate) {\n            Object.assign(template, fetchedTemplate);\n          }\n        } catch (error) {\n          ElMessage.error('Failed to load template');\n        }\n      }\n    });\n    const onDragStart = (event, element) => {\n      event.dataTransfer.setData('element', JSON.stringify(element));\n    };\n    const onDrop = event => {\n      const elementData = event.dataTransfer.getData('element');\n      if (elementData) {\n        const element = JSON.parse(elementData);\n\n        // Create new element with default properties\n        const newElement = {\n          id: uuidv4(),\n          type: element.type,\n          label: element.label,\n          name: element.type + '_' + Date.now(),\n          placeholder: '',\n          helperText: '',\n          required: false,\n          options: element.type === 'select' || element.type === 'radio' || element.type === 'checkbox' ? [{\n            label: 'Option 1',\n            value: 'option1'\n          }] : undefined\n        };\n        currentElement.value = {\n          ...newElement\n        };\n        isEditingElement.value = false;\n        elementDialogVisible.value = true;\n      }\n    };\n    const editElement = index => {\n      currentElement.value = {\n        ...template.elements[index]\n      };\n      currentElementIndex.value = index;\n      isEditingElement.value = true;\n      elementDialogVisible.value = true;\n    };\n    const removeElement = index => {\n      template.elements.splice(index, 1);\n    };\n    const addOption = () => {\n      if (!currentElement.value.options) {\n        currentElement.value.options = [];\n      }\n      const newOptionIndex = currentElement.value.options.length + 1;\n      currentElement.value.options.push({\n        label: `Option ${newOptionIndex}`,\n        value: `option${newOptionIndex}`\n      });\n    };\n    const removeOption = index => {\n      currentElement.value.options.splice(index, 1);\n    };\n    const saveElement = () => {\n      if (!currentElement.value.label || !currentElement.value.name) {\n        ElMessage.warning('Element label and name are required');\n        return;\n      }\n      if (isEditingElement.value) {\n        template.elements[currentElementIndex.value] = {\n          ...currentElement.value\n        };\n      } else {\n        template.elements.push({\n          ...currentElement.value\n        });\n      }\n      elementDialogVisible.value = false;\n      currentElementIndex.value = -1;\n      currentElement.value = {};\n    };\n    const saveTemplate = async () => {\n      if (!template.name) {\n        ElMessage.warning('Template name is required');\n        return;\n      }\n      try {\n        if (isEdit.value) {\n          await store.dispatch('updateTemplate', template);\n          ElMessage.success('Template updated successfully');\n        } else {\n          const newTemplate = await store.dispatch('createTemplate', template);\n          ElMessage.success('Template created successfully');\n          router.push(`/templates/${newTemplate._id}`);\n        }\n      } catch (error) {\n        ElMessage.error(`Failed to ${isEdit.value ? 'update' : 'create'} template`);\n      }\n    };\n    const getElementComponent = elementType => {\n      // This would map the element type to a component\n      // For now, we'll return a simple string but in a real app, you'd return components\n      return 'div';\n    };\n    return {\n      template,\n      loading,\n      isEdit,\n      availableElements,\n      elementDialogVisible,\n      isEditingElement,\n      currentElement,\n      onDragStart,\n      onDrop,\n      editElement,\n      removeElement,\n      addOption,\n      removeOption,\n      saveElement,\n      saveTemplate,\n      getElementComponent\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","onMounted","useStore","useRouter","useRoute","ElMessage","v4","uuidv4","name","props","id","type","String","required","setup","store","router","template","description","elements","isPublished","loading","getters","isLoading","isEdit","elementDialogVisible","isEditingElement","currentElement","currentElementIndex","availableElements","label","fetchedTemplate","dispatch","Object","assign","error","onDragStart","event","element","dataTransfer","setData","JSON","stringify","onDrop","elementData","getData","parse","newElement","Date","now","placeholder","helperText","options","value","undefined","editElement","index","removeElement","splice","addOption","newOptionIndex","length","push","removeOption","saveElement","warning","saveTemplate","success","newTemplate","_id","getElementComponent","elementType"],"sources":["/Users/mdtazbirurrahmanbhuiyan/Experiments/VueJS template buillder/VueJS-template-builder/frontend/src/views/templates/TemplateForm.vue"],"sourcesContent":["<template>\n  <div class=\"template-form\">\n    <div class=\"page-header\">\n      <h1>{{ isEdit ? 'Edit Template' : 'Create Template' }}</h1>\n      <div class=\"header-actions\">\n        <el-button @click=\"$router.push('/templates')\">Cancel</el-button>\n        <el-button type=\"primary\" @click=\"saveTemplate\" :loading=\"loading\">\n          Save Template\n        </el-button>\n      </div>\n    </div>\n    \n    <el-row :gutter=\"20\">\n      <el-col :span=\"8\">\n        <el-card class=\"container form-settings\">\n          <h2>Template Settings</h2>\n          \n          <el-form label-position=\"top\">\n            <el-form-item label=\"Template Name\" required>\n              <el-input v-model=\"template.name\" placeholder=\"Enter template name\" />\n            </el-form-item>\n            \n            <el-form-item label=\"Description\">\n              <el-input\n                v-model=\"template.description\"\n                type=\"textarea\"\n                rows=\"3\"\n                placeholder=\"Enter template description\"\n              />\n            </el-form-item>\n            \n            <el-form-item>\n              <el-switch\n                v-model=\"template.isPublished\"\n                active-text=\"Published\"\n                inactive-text=\"Draft\"\n              />\n            </el-form-item>\n          </el-form>\n          \n          <h3>Available Elements</h3>\n          <div class=\"element-palette\">\n            <div\n              v-for=\"element in availableElements\"\n              :key=\"element.type\"\n              class=\"element-item\"\n              draggable=\"true\"\n              @dragstart=\"onDragStart($event, element)\"\n            >\n              <el-tag size=\"large\">{{ element.label }}</el-tag>\n            </div>\n          </div>\n        </el-card>\n      </el-col>\n      \n      <el-col :span=\"16\">\n        <el-card class=\"container form-canvas\">\n          <h2>Form Layout</h2>\n          <div\n            class=\"form-drop-area\"\n            @drop=\"onDrop($event)\"\n            @dragover.prevent\n            @dragenter.prevent\n          >\n            <template v-if=\"template.elements && template.elements.length > 0\">\n              <div\n                v-for=\"(element, index) in template.elements\"\n                :key=\"index\"\n                class=\"form-element\"\n              >\n                <div class=\"element-header\">\n                  <span>{{ element.label }}</span>\n                  <div class=\"element-actions\">\n                    <el-button size=\"small\" @click=\"editElement(index)\">Edit</el-button>\n                    <el-button size=\"small\" type=\"danger\" @click=\"removeElement(index)\">Remove</el-button>\n                  </div>\n                </div>\n                \n                <div class=\"element-preview\">\n                  <component \n                    :is=\"getElementComponent(element.type)\"\n                    v-bind=\"element\"\n                    disabled\n                  />\n                </div>\n              </div>\n            </template>\n            \n            <div v-else class=\"empty-form\">\n              <el-empty description=\"Drag elements here to build your form template\" />\n            </div>\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n    \n    <el-dialog\n      v-model=\"elementDialogVisible\"\n      :title=\"isEditingElement ? 'Edit Element' : 'Add Element'\"\n      width=\"50%\"\n    >\n      <el-form label-position=\"top\">\n        <el-form-item label=\"Label\" required>\n          <el-input v-model=\"currentElement.label\" placeholder=\"Enter element label\" />\n        </el-form-item>\n        \n        <el-form-item label=\"Name\" required>\n          <el-input v-model=\"currentElement.name\" placeholder=\"Enter element name\" />\n        </el-form-item>\n        \n        <el-form-item label=\"Placeholder\">\n          <el-input v-model=\"currentElement.placeholder\" placeholder=\"Enter placeholder text\" />\n        </el-form-item>\n        \n        <el-form-item label=\"Helper Text\">\n          <el-input v-model=\"currentElement.helperText\" placeholder=\"Enter helper text\" />\n        </el-form-item>\n        \n        <el-form-item>\n          <el-switch\n            v-model=\"currentElement.required\"\n            active-text=\"Required\"\n            inactive-text=\"Optional\"\n          />\n        </el-form-item>\n        \n        <el-form-item v-if=\"currentElement.type === 'select' || currentElement.type === 'radio' || currentElement.type === 'checkbox'\">\n          <h4>Options</h4>\n          <div v-for=\"(option, index) in currentElement.options\" :key=\"index\" class=\"option-item\">\n            <el-input v-model=\"option.label\" placeholder=\"Option label\" />\n            <el-input v-model=\"option.value\" placeholder=\"Option value\" />\n            <el-button type=\"danger\" icon=\"el-icon-delete\" circle @click=\"removeOption(index)\" />\n          </div>\n          <el-button type=\"primary\" @click=\"addOption\">Add Option</el-button>\n        </el-form-item>\n      </el-form>\n      \n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"elementDialogVisible = false\">Cancel</el-button>\n          <el-button type=\"primary\" @click=\"saveElement\">Save</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRouter, useRoute } from 'vue-router'\nimport { ElMessage } from 'element-plus'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport default {\n  name: 'TemplateForm',\n  props: {\n    id: {\n      type: String,\n      required: false\n    }\n  },\n  \n  setup(props) {\n    const store = useStore()\n    const router = useRouter()\n    // Removed unused route variable\n    \n    const template = reactive({\n      name: '',\n      description: '',\n      elements: [],\n      isPublished: false\n    })\n    \n    const loading = computed(() => store.getters.isLoading)\n    const isEdit = computed(() => !!props.id)\n    \n    const elementDialogVisible = ref(false)\n    const isEditingElement = ref(false)\n    const currentElement = ref({})\n    const currentElementIndex = ref(-1)\n    \n    const availableElements = [\n      { type: 'text', label: 'Text Input' },\n      { type: 'textarea', label: 'Text Area' },\n      { type: 'number', label: 'Number' },\n      { type: 'email', label: 'Email' },\n      { type: 'password', label: 'Password' },\n      { type: 'select', label: 'Dropdown' },\n      { type: 'radio', label: 'Radio Buttons' },\n      { type: 'checkbox', label: 'Checkboxes' },\n      { type: 'date', label: 'Date Picker' },\n      { type: 'time', label: 'Time Picker' },\n      { type: 'file', label: 'File Upload' },\n      { type: 'slider', label: 'Slider' },\n      { type: 'switch', label: 'Switch' },\n      { type: 'divider', label: 'Divider' },\n      { type: 'heading', label: 'Heading' }\n    ]\n    \n    onMounted(async () => {\n      if (props.id) {\n        try {\n          const fetchedTemplate = await store.dispatch('fetchTemplateById', props.id)\n          if (fetchedTemplate) {\n            Object.assign(template, fetchedTemplate)\n          }\n        } catch (error) {\n          ElMessage.error('Failed to load template')\n        }\n      }\n    })\n    \n    const onDragStart = (event, element) => {\n      event.dataTransfer.setData('element', JSON.stringify(element))\n    }\n    \n    const onDrop = (event) => {\n      const elementData = event.dataTransfer.getData('element')\n      if (elementData) {\n        const element = JSON.parse(elementData)\n        \n        // Create new element with default properties\n        const newElement = {\n          id: uuidv4(),\n          type: element.type,\n          label: element.label,\n          name: element.type + '_' + Date.now(),\n          placeholder: '',\n          helperText: '',\n          required: false,\n          options: element.type === 'select' || element.type === 'radio' || element.type === 'checkbox' \n            ? [{ label: 'Option 1', value: 'option1' }] \n            : undefined\n        }\n        \n        currentElement.value = { ...newElement }\n        isEditingElement.value = false\n        elementDialogVisible.value = true\n      }\n    }\n    \n    const editElement = (index) => {\n      currentElement.value = { ...template.elements[index] }\n      currentElementIndex.value = index\n      isEditingElement.value = true\n      elementDialogVisible.value = true\n    }\n    \n    const removeElement = (index) => {\n      template.elements.splice(index, 1)\n    }\n    \n    const addOption = () => {\n      if (!currentElement.value.options) {\n        currentElement.value.options = []\n      }\n      \n      const newOptionIndex = currentElement.value.options.length + 1\n      currentElement.value.options.push({\n        label: `Option ${newOptionIndex}`,\n        value: `option${newOptionIndex}`\n      })\n    }\n    \n    const removeOption = (index) => {\n      currentElement.value.options.splice(index, 1)\n    }\n    \n    const saveElement = () => {\n      if (!currentElement.value.label || !currentElement.value.name) {\n        ElMessage.warning('Element label and name are required')\n        return\n      }\n      \n      if (isEditingElement.value) {\n        template.elements[currentElementIndex.value] = { ...currentElement.value }\n      } else {\n        template.elements.push({ ...currentElement.value })\n      }\n      \n      elementDialogVisible.value = false\n      currentElementIndex.value = -1\n      currentElement.value = {}\n    }\n    \n    const saveTemplate = async () => {\n      if (!template.name) {\n        ElMessage.warning('Template name is required')\n        return\n      }\n      \n      try {\n        if (isEdit.value) {\n          await store.dispatch('updateTemplate', template)\n          ElMessage.success('Template updated successfully')\n        } else {\n          const newTemplate = await store.dispatch('createTemplate', template)\n          ElMessage.success('Template created successfully')\n          router.push(`/templates/${newTemplate._id}`)\n        }\n      } catch (error) {\n        ElMessage.error(`Failed to ${isEdit.value ? 'update' : 'create'} template`)\n      }\n    }\n    \n    const getElementComponent = (elementType) => {\n      // This would map the element type to a component\n      // For now, we'll return a simple string but in a real app, you'd return components\n      return 'div'\n    }\n    \n    return {\n      template,\n      loading,\n      isEdit,\n      availableElements,\n      elementDialogVisible,\n      isEditingElement,\n      currentElement,\n      onDragStart,\n      onDrop,\n      editElement,\n      removeElement,\n      addOption,\n      removeOption,\n      saveElement,\n      saveTemplate,\n      getElementComponent\n    }\n  }\n}\n</script>\n\n<style scoped>\n.template-form {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.header-actions {\n  display: flex;\n  gap: 1rem;\n}\n\n.form-settings, .form-canvas {\n  height: 100%;\n}\n\n.element-palette {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-top: 1rem;\n}\n\n.element-item {\n  cursor: move;\n}\n\n.form-drop-area {\n  min-height: 400px;\n  border: 2px dashed #dcdfe6;\n  border-radius: 6px;\n  padding: 1rem;\n  margin-top: 1rem;\n}\n\n.empty-form {\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #909399;\n}\n\n.form-element {\n  border: 1px solid #dcdfe6;\n  border-radius: 4px;\n  margin-bottom: 1rem;\n  padding: 1rem;\n  background-color: #f5f7fa;\n}\n\n.element-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 0.5rem;\n}\n\n.element-actions {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.element-preview {\n  background-color: white;\n  padding: 0.5rem;\n  border: 1px solid #ebeef5;\n  border-radius: 4px;\n}\n\n.option-item {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 10px;\n  align-items: center;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}